# This playbook configures vault PKI to become an issuer for existing PKI root CA
# This means CSR created and saved under “~/.consul_tokens/pki_intermediate.csr” must be signed by the existing CA
# Final step - manually upload signed int_pki public cert using command at the bottom of this playbook

- name: Configure vault
  hosts: vaultservers[0]

  tasks:

# Load the master_token created in the build/init process into "vault_token"
   - name: Load the master_token created in the build/init process
     become: no
     shell: cat {{ tokens_dir }}/vault_init | grep -e 'Initial Root Token:' | gawk -F '"' '{print $14}' | awk '{print $4}'
     register: vault_token
     delegate_to: localhost

   - name: Print returned vault_token and make token available as var
     debug:
      var: vault_token.stdout

# Generate PKI and create Intermediate CSR
   - name: Enable PKI secrets engines
     environment:
       VAULT_ADDR: "{{ vault_add }}"
       VAULT_TOKEN: "{{ vault_token.stdout }}"
     command: "{{ item }}"
     with_items:
        - vault secrets enable pki
        - vault secrets tune -max-lease-ttl=87600h pki
        - vault secrets enable -path=pki_int pki
        - vault secrets tune -max-lease-ttl=43800h pki_int
        - vault write pki_int/roles/"{{ pki_role }}" allowed_domains="{{ domain }}"
             allow_subdomains=true max_ttl="720h"

   - name: Install JQ so json output can manipulated and only csr can be extracted
     become: yes
     apt:
      name: jq
      state: present

   # Create and copy CSR to a file
   - name: Create CSR and copy file to pki_intermediate.csr on the remote server
     environment:
       VAULT_ADDR: "{{ vault_add }}"
       VAULT_TOKEN: "{{ vault_token.stdout }}"
     shell: vault write -format=json pki_int/intermediate/generate/internal
         common_name="{{ domain }} Intermediate Authority" | jq -r '.data.csr' > pki_intermediate.csr

   - name: Copy pki_in CSR file to local server
     fetch:
      src: pki_intermediate.csr
      dest: "{{ tokens_dir }}/pki_intermediate.csr"
      flat: yes

   - name: Remove pki_in CSR file from remote server
     file:
      path: pki_intermediate.csr
      state: absent

# After CSR is signed please run this command manually to upload signed pub cert
# vault write pki_int/intermediate/set-signed certificate=@intermediate.cert
