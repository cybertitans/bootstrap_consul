
# Enable ACL by changing config.json on all servers & reloading them
- name: Change config file and enable ACL
  import_playbook: enable_acl.yml

# Start bootstrap process and use primary/active server (consuls1)
-  name: Start bootstrap master_token
   hosts: consulservers[0]
   tasks:

    - name: pause to allow the cluster to come up
      pause:
       seconds: 20

# Create and bootstrap master_token (make sure you secure it)
    - name: bootstrap Server
      uri:
       url: "http://{{ groups['consulservers'][0] }}:8500/v1/acl/bootstrap"
       headers:
       method: PUT
       return_content: yes
      register: master_token

# Print returned master_token json dictionary
    - name: Print returned master_token json dictionary
      debug:
        var: master_token.json

    - name: copy the output to a local file
      copy:
       content: "{{ master_token.json.SecretID }}"
       dest: "~/.master_token"
      delegate_to: localhost

# Create new policies for the consul agents, anonymous read only for dns and to list nodes
    - name: Create required policies
      uri:
       url: "http://{{ Primary_consul_server }}:8500/v1/acl/policy"
       headers:
        X-Consul-Token: "{{ master_token.json.SecretID }}"
       method: PUT
       return_content: true
       body_format: json
       body: "{{ lookup('file', item) }}"
      with_items:
       - files/agentpolicy.json
       - files/ui-policy.json
       - files/dnsreadonly.json
       - files/listallnodes.json

# Create agent token and save it to ~/.agent_token
    - name: Create a new agent_token using shell module
      environment:
       CONSUL_HTTP_TOKEN: "{{ master_token.json.SecretID }}"
      shell: 'consul acl token create -description "Agent Token" -policy-name "agent-policy"'
      register: agent_token

# Print returned agent_token json dictionary
    - name: Print returned agent_token json dictionary
      debug:
        var: "agent_token.stdout_lines"

    - name: copy the agent_token output to a local file
      copy:
       content: "{{ agent_token.stdout}}"
       dest: "~/.agent_token"
      delegate_to: localhost

# Create a new token for the UI and associated token and save it ~/.ui_token
    - name: Create a new token for ui using shell module
      environment:
       CONSUL_HTTP_TOKEN: "{{ master_token.json.SecretID }}"
      shell: 'consul acl token create -description "UI Token" -policy-name "ui-policy"'
      register: ui_token

# Print returned ui_token json dictionary
    - name: Print returned ui_token json dictionary
      debug:
        var: ui_token.stdout_lines

    - name: copy the ui_token output to a local file
      copy:
       content: "{{ ui_token.stdout_lines }}"
       dest: "~/.ui_token"
      delegate_to: localhost

# Update the anonymous token and associate with DNS and node list policy (Optional)

    - name: Update and associate above policies with anonymous token
      environment:
       CONSUL_HTTP_TOKEN: "{{ master_token.json.SecretID }}"
      shell: |
       consul acl token update -id 00000000-0000-0000-0000-000000000002 -policy-name list-all-nodes -description "Anonymous Token - Can List Nodes"
       consul acl token update -id 00000000-0000-0000-0000-000000000002 --merge-policies -description "Anonymous Token - Can List Nodes" -policy-name service-consul-read

# Add agents token to the config file to enable them to join the cluster
- name: Chang servers config file and add agents token
  import_playbook: add_agnet_acl_token.yml
